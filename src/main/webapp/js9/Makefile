#
# This file is a Makefile for HOSTIP.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@foo@" will get replaced in the
# actual Makefile.
#

PACKAGE = js9
VERSION = 1-e
DISTNAME = ${PACKAGE}-${VERSION}
DDISTNAME = ${PACKAGE}-data

DISTDIR	= ../export
FTPDIR	= ../ftp

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix =		/soft/saord
exec_prefix =		${prefix}

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT =

# Directory in which to install the .a or .so binary for the TPOS library:
LIB_INSTALL_DIR =	$(INSTALL_ROOT)$(exec_prefix)/lib

# Directory in which to install the program wish:
BIN_INSTALL_DIR =	$(INSTALL_ROOT)$(exec_prefix)/bin

# Directory in which to install the include file tpos.h:
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/include

# Top-level directory for manual entries:
MAN_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/man

# Directory in which to install manual entry for TPOS programs:
MAN1_INSTALL_DIR =	$(MAN_INSTALL_DIR)/man1

# Directory in which to install manual entries for TPOS's C library
# procedures:
MAN3_INSTALL_DIR =	$(MAN_INSTALL_DIR)/man3

# extra Libs required to link (e.g. socket libraries)
LIBS =            	-L /soft/saord/lib -lfuntools -Wl,-R /proj/rd/linux64/lib -L /proj/rd/linux64/lib -lpng  -ldl -lm

INCS =			-I/soft/saord/include -I/proj/rd/linux64/include

# To change the compiler switches, for example to change from -O
# to -g, change the following line:
CFLAGS = 		-g -W -Wall -Wno-implicit-int

# To add ld switches, change the following line:
LDFLAGS =		-g

# Some versions of make, like SGI's, use the following variable to
# determine which shell to use for executing commands:
SHELL =			/bin/sh

# There are just too many different versions of "install" around;
# better to use the install-sh script that comes with the distribution,
# which is slower but guaranteed to work.

INSTALL = 		./install-sh -c
INSTALL_PROGRAM =	${INSTALL}
INSTALL_DATA =		${INSTALL} -m 644

#----------------------------------------------------------------
# The information below is modified by the configure script when
# Makefile is generated from Makefile.in.  You shouldn't normally
# modify any of this stuff by hand.
#----------------------------------------------------------------

AC_FLAGS =		-DHAVE_CONFIG_H
RANLIB =		ranlib

#----------------------------------------------------------------
# The information below should be usable as is.  The configure
# script won't modify it and you shouldn't need to modify it
# either.
#----------------------------------------------------------------
RM =		rm -f

CP =		cp -p

CC =		gcc

CC_SWITCHES =	${CFLAGS} -I. ${AC_FLAGS} ${INCS}

DEPEND_SWITCHES = ${CFLAGS} -I. ${AC_FLAGS}

# type of backend server (or none)
HELPER =	get
USEHELPER =	yes

# where the web files go on your site
WEBDIR =   	/home/mred/public_html/htdocs/js9
CGIDIR =   	/home/mred/public_html/cgi-bin/js9
CGIURL =   	./cgi-bin/js9
CGIXPATH =   	/soft/saord/bin
# this is for SAO install only ... I think!
SAODIR =	

WEBDIRS	=	plugins params js css images

BEDIRS =	node_modules analysis-plugins analysis-wrappers

WEBFILES =	js9.js js9.min.js js9-$(VERSION).js js9-$(VERSION).min.js \
		js9support.js js9support.min.js js9support.css js9plugins.js \
		js9support.txt js9.css fitsy.js fitsy.min.js \
		js9Msg.js js9Helper.js js9Prefs-default.json \
		js9Prefs.json favicon.ico index.html

SAOFILES =	index.html

CSSFILES =	css/jquery.contextMenu.css css/dhtmlwindow.css

JSFILES =	js/jquery.min.js js/jquery.contextMenu.min.js js/jquery.flot.min.js js/jquery.flot.errorbars.min.js js/jquery.flot.selection.min.js js/flot-zoom.min.js js/sprintf.min.js js/dhtmlwindow.min.js js/dhtmlwindow_blurb.js js/fabric.min.js js/pako_inflate.min.js js/astroem.js

PLUGINFILES =	plugins/archive/archive.js \
		plugins/fitsy/binning.js \
		plugins/imexam/imexam.js \
		plugins/imexam/encircled.js \
		plugins/imexam/pixtable.js \
		plugins/imexam/radproj.js \
		plugins/imexam/reghist.js \
		plugins/imexam/regstat.js \
		plugins/imexam/xyproj.js \
		plugins/imexam/3dplot.js

PREFFILES =	js9Prefs.json

CGIFILES =	js9Helper.cgi

WEBHELP	=	help

WEBDATA	=	fits png kes75

SRCS =		tpos.c js9helper.c

PROGS =		tpos js9helper

TESTPROGS =	pngdisp

INCLUDES =	js9helper.h

SCRIPTS =	funhist2flot funcnts2flot fits2png 

SCRIPTS2 =	js9

ARCFILES =	js9-$(VERSION).js js9-$(VERSION).min.js js9Msg.js \
		js9.css js9Helper.js js9Prefs-default.json \
		js9basics.html js9panzoom.html js9analysis.html js9multi.html \
		js9create.html js9preload.html js9bitpix.html \
		js9onchange.html js9rgb.html js9cat.html js9plugins.html index.html \
		js9Helper-default.cgi fitsy.js

MFILES =	Makefile Makefile.in conf.h conf.h.in config.guess config.sub \
		configure configure.ac install-sh js9helper.pc.in js9.in \
		saoconfig saoprefs.sed nnode mkhelper mkjs9 js9Helper-default.cgi

all:		progs-$(USEHELPER) helper

progs-yes:	$(PROGS)

progs-no:	

testall:	$(TESTPROGS)

All:		all testall

tpos:		tpos.o
		$(CC) $(LDFLAGS) tpos.o -o tpos $(LIBS)

js9helper:	js9helper.o
		$(CC) $(LDFLAGS) js9helper.o -o js9helper $(LIBS)

pngdisp:	pngdisp.o
		$(CC) $(LDFLAGS) pngdisp.o -o pngdisp $(LIBS)

links:		FORCE
		@(rm -f js9.js js9.min.js; \
		  ln -s js9-$(VERSION).js js9.js; \
		  ln -s js9-$(VERSION).min.js js9.min.js;)

prefs:		FORCE
		@(echo "copying default preferences to js9Prefs.json"; \
		  cp -p js9Prefs-default.json js9Prefs.json;)

saoprefs:	FORCE
		@(echo "editing js9Prefs for SAO installations ..."; \
		sed -f saoprefs.sed < js9Prefs.json > js9Prefs-sao.json)

helper:		FORCE
		@(./mkhelper "$(HELPER)" \
		  "$(CGIDIR)" "$(CGIURL)" "$(CGIXPATH)"; \
		  if [ x"$(USEHELPER)" = x"yes" ]; then \
		    ./mkjs9 "$(WEBDIR)"; \
		  fi;)

nohelper:	FORCE
		@(./mkhelper none; \
		  ./mkjs9 "$(WEBDIR)")

nodejshelper:	FORCE
		@(./mkhelper nodejs; \
		  ./mkjs9 "$(WEBDIR)")


cgihelper:	FORCE prefs
		@(./mkhelper get "$(CGIDIR)" "$(CGIURL)" "$(CGIXPATH)"; \
		  ./mkjs9 "$(WEBDIR)")

js9:		FORCE
		@(if [ x"$(USEHELPER)" = x"yes" ]; then \
		    ./mkjs9 "$(WEBDIR)"; \
		  fi;)

minify:		FORCE
		@minify js9-$(VERSION).js

js9support:	FORCE
		@(echo "remaking js9support ..."; minify fitsy.js; \
		  echo "css files in js9support.css: " > js9support.txt; \
		  echo $(CSSFILES) >>  js9support.txt; \
		  cat $(CSSFILES)  >  js9support.css;  \
		  echo "js files in js9support.js: " >> js9support.txt; \
		  echo $(JSFILES)  >> js9support.txt; \
		  cat $(JSFILES)   >  js9support.min.js; \
		  X=`echo "$(JSFILES)" | sed 's/\.min//g'`; \
		  cat $$X  > js9support.js; \
		  echo "plugin files in js9plugins.js: " >> js9support.txt; \
		  echo $(PLUGINFILES)  >> js9support.txt; \
		  cat $(PLUGINFILES)   >  js9plugins.js;)


remin:		FORCE
		@(echo "remaking js9.min.js ..."; touch js9-$(VERSION).js; minify js9-$(VERSION).js)

refresh:	js9support remin

jslint:		FORCE
		@(jslint js9.js; jslint fitsy.js)

archive:	FORCE
		@jsarchive $(ARCFILES) $(SCRIPTS) $(SRCS)

tar:		FORCE
		($(RM) config.cache; \
		cd ..; \
		tar cf - $(DISTNAME) | gzip -9 -c > $(DISTNAME).tar.gz)

install:	install-binaries install-scripts install-web

install-binaries: FORCE
	@(if [ x$(USEHELPER) = xyes ]; then \
	  echo "Installing programs ..."; \
	  for i in $(LIB_INSTALL_DIR) $(INCLUDE_INSTALL_DIR) $(BIN_INSTALL_DIR) ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "making directory $$i"; \
		mkdir -p $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done; \
	  for i in $(PROGS) ; \
	    do \
		if [ -f $$i.exe ] ; then \
		    echo "installing $$i.exe" ; \
		    $(INSTALL_PROGRAM) $$i.exe $(BIN_INSTALL_DIR)/$$i.exe ; \
		elif [ -f $$i ] ; then \
		    echo "installing $$i" ; \
		    $(INSTALL_PROGRAM) $$i $(BIN_INSTALL_DIR)/$$i ; \
		fi; \
	    done; \
	  else \
	    echo "nothing to install for 'binaries' (no helper configured)"; \
	  fi;)

install-scripts: $(SCRIPTS) $(SCRIPTS2)
	@(if [ x$(USEHELPER) = xyes ]; then \
	  echo "Installing scripts ..."; \
	  for i in $(BIN_INSTALL_DIR) ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "making directory $$i"; \
		mkdir -p $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done; \
	 for i in $(SCRIPTS) $(SCRIPTS2) ; \
	    do \
		if [ -f $$i ] ; then \
		    echo "installing $$i" ; \
		    $(INSTALL_PROGRAM) $$i $(BIN_INSTALL_DIR)/$$i ; \
		fi; \
	    done; \
	  else \
	    echo "nothing to install for 'scripts' (no helper configured)"; \
	  fi;)

install-web:		install-webdirs install-webfiles

install-webdirs:	FORCE
	@(echo "Installing web directories ..."; \
	 for i in $(WEBDIRS) $(WEBHELP); do \
	    if [ x$(WEBDIR) != x ]; then \
		mkdir -p $(WEBDIR); \
		if [ -d $$i ] ; then \
		    echo "installing web dir: $$i" ; \
		    tar cf - $$i | (cd $(WEBDIR); tar xf -); \
		fi; \
	    fi; \
         done; \
	 if [ x$(USEHELPER) = xyes ]; then \
	   echo "Installing backend helper dirs ..."; \
	   for i in $(BEDIRS); do \
		if [ -d $$i ] ; then \
		    echo "installing backend dir: $$i" ; \
		    tar cf - $$i | (cd $(WEBDIR); tar xf -); \
		fi; \
           done; \
	 fi;)

install-webfiles:	FORCE
	@(echo "Installing web files ..."; \
	if [ x$(WEBDIR) != x ]; then \
		mkdir -p $(WEBDIR); \
		if [ -f $(WEBDIR)/js9Prefs.json ] ; then \
		    echo "moving aside old js9Prefs.json" ; \
		    mv $(WEBDIR)/js9Prefs.json{,-old}; \
	        fi; \
	fi; \
	for i in $(PREFFILES) $(WEBFILES) js9*.html ; do\
	    if [ x$(WEBDIR) != x ]; then \
		if [ -d $$i ] ; then \
		    echo "installing web directory: $$i" ; \
		elif [ -f $$i ] ; then \
		    echo "installing web file: $$i" ; \
		fi; \
		tar cf - $$i | (cd $(WEBDIR); tar xf -); \
	    fi; \
        done; \
	if [ -d "$(CGIDIR)" ]; then \
	    for i in $(CGIFILES) ; do\
	        if [ -f $$i ]; then \
		    if [ -d $$i ] ; then \
		        echo "installing cgi directory: $$i" ; \
	  	    elif [ -f $$i ] ; then \
		        echo "installing cgi file: $$i" ; \
		    fi; \
		    tar cf - $$i | (cd $(CGIDIR); tar xf -); \
	        else \
		    echo "skipping cgi install: $$i"; \
	        fi; \
	    done; \
	else \
	    echo "nothing to install in cgi (no helper configured)"; \
	fi;)

install-webdata:	FORCE
	@(for i in $(WEBDATA) ; do\
	    if [ x$(WEBDIR) != x ]; then \
	        mkdir -p $(WEBDIR); \
		if [ -d $$i ] ; then \
		    echo "installing $$i" ; \
		    tar cf - $$i | (cd $(WEBDIR); tar xf -); \
		fi; \
	    fi; \
         done;)

install-sao:	saoprefs
		@(if [ -d "$(SAODIR)" ]; then \
		    for i in $(SAOFILES) ; \
		    do \
			if [ -f $$i ] ; then \
			    echo "installing file: $$i" ; \
		            $(CP) $$i $(SAODIR)/.; \
			fi; \
		    done; \
		  fi; \
		  $(CP) js9Prefs-sao.json $(WEBDIR)/js9Prefs.json;)

release:	refresh js9support links prefs
		(mkdir -p $(DISTDIR)/$(DISTNAME); \
		tar cf - $(WEBFILES) $(WEBDIRS) $(WEBHELP) js9*.html \
			 $(SRCS) $(INCLUDES) \
			 $(SCRIPTS) $(MFILES) | \
		(cd $(DISTDIR)/$(DISTNAME); tar xf -); \
		cd $(DISTDIR) ; \
		tar cf - $(DISTNAME) | gzip -c > $(DISTNAME).tar.gz; \
		rm -rf $(DISTNAME))

release-data:	FORCE
		tar cf - $(WEBDATA) | gzip -c > $(DISTDIR)/$(DDISTNAME).tar.gz;

spell:		FORCE
		@(for f in $(WEBHELP)/*.html; do \
			echo "spellcheck $$f ..."; \
			aspell -c $$f; \
		  done)

clean:		FORCE
		$(RM) *.a *.so *.dylib *.o *.exe core errs *pure* .nfs* \
			foo* *~ \#* TAGS *.E a.out errors \
			$(PROGS) $(CGIFILES) $(TESTPROGS) \
			gmon.out *.pg *.bak  *js9Prefs.json-orig \
			config.info config.log ltest \
			js/*~ params/*~ \
			doc/*~ notes/*~ test/*~ help/*~ help/*.bak \
			analysis-wrappers/*~ analysis-plugins/*~ \
			plugins/*~ plugins/*/*~ \
			astroem/*~ astroem/*.o 
		$(RM) -rf autom4te.cache a.out.dSYM

distclean:	clean
		$(RM) Makefile config.status config.cache config.log \
		$(PREFFILES)

maintainer-clean:: clean
		$(RM) config.status config.cache config.log \
		$(PREFFILES)

Makefile:	Makefile.in
		$(SHELL) config.status

make:		Makefile.in
		$(SHELL) config.status

depend:		FORCE
		makedepend -- $(DEPEND_SWITCHES) -- $(SRCS)

tpos.o:		tpos.c $(INCL)
		$(CC) -c $(CC_SWITCHES) tpos.c

js9helper.o:	js9helper.c $(INCL)
		$(CC) -c $(CC_SWITCHES) js9helper.c

pngdisp.o:	pngdisp.c $(INCL)
		$(CC) -c $(CC_SWITCHES) pngdisp.c

configure:	configure.ac
		autoconf

errcheck:	FORCE
		@-egrep 'error|warning' foo | egrep -v "^lex.*but not used"

FORCE:

# DO NOT DELETE THIS LINE -- make depend depends on it.
